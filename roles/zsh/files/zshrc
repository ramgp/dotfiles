# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

source $HOME/.dotfiles/roles/zsh/env.zsh
source $HOME/.dotfiles/roles/zsh/path.zsh

# Enable vim mode
bindkey -v
KEYTIMEOUT=1

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/core"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# reloading the config destroys it 
if [[ ! -n ${ZINIT} ]]; then
  declare -A ZINIT 
  ZINIT[ZCOMPDUMP_PATH]="$XDG_CACHE_HOME"/zcompdump/zcompdump-zinit
fi

if (( ${+commands[eza]} )); then
  ZINIT[LIST_COMMAND]='eza --color=always --tree --icons -L3'
elif (( ${+commands[tree]} )); then
  ZINIT[LIST_COMMAND]='tree -L 3 -C --charset utf-8'
else
  ZINIT[LIST_COMMAND]='ls --tree'
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# autoload -Uz _zinit
# (( ${+_comps} )) && _comps[zinit]=_zinit

# Add in Powerlevel10k
zinit ice depth=1; zinit light romkatv/powerlevel10k

zinit ice wait lucid; zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions

zinit for atload"zicompinit; zicdreplay" \
    blockf lucid wait zsh-users/zsh-completions

# zinit ice wait lucid; zinit light zdharma-continuum/fast-syntax-highlighting
zinit light Aloxaf/fzf-tab
zinit light trystan2k/zsh-tab-title
zinit ice wait lucid; zinit light sineto/web-search
zinit load atuinsh/atuin

# Add in snippets
zinit snippet OMZP::sudo
zinit snippet OMZP::command-not-found

# Load completions
autoload -Uz compinit && compinit

zinit cdreplay -q

source $HOME/.dotfiles/roles/zsh/config.zsh

[ -f $HOME/.bash_aliases ] && source $HOME/.bash_aliases
[ -f $HOME/.r1_aliases ] && source $HOME/.r1_aliases

if [[ -s "${HOME}/.config/broot/launcher/bash/br" ]]; then
  source "${HOME}/.config/broot/launcher/bash/br"
fi

BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

# Cycle through history based on characters already typed on the line
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

# Use rg to respect .gitignore
export FZF_DEFAULT_COMMAND='rg --hidden --ignore .git -g ""'

# [ -f "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh ] && source "${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.zsh

fpath+=${ZDOTDIR:-~}/.zsh_functions

export N_PREFIX=$HOME/.local/n
PATH=$N_PREFIX/bin:$PATH

export PYENV_ROOT="$HOME/.pyenv"
PATH="$PATH:$PYENV_ROOT/bin"

if (($+commands[pyenv])); then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi

pyenv-brew-relink() {
    rm -f "$HOME/.pyenv/versions/*-brew"
    for i in $(brew --cellar)/python* ; do
        ln -s -f "$p" "$HOME/.pyenv/versions/${i##/*/}-brew"
    done
    pyenv rehash
}

if (($+commands[thefuck])); then
  eval $(thefuck --alias)
fi

if (($+commands[zoxide])); then
  eval "$(zoxide init zsh)"
fi

source $HOME/.dotfiles/roles/zsh/aliases.zsh

# To customize prompt, run `p10k configure` or edit ~/.dotfiles/roles/zsh/files/p10k.zsh.
[[ ! -f ~/.dotfiles/roles/zsh/files/p10k.zsh ]] || source ~/.dotfiles/roles/zsh/files/p10k.zsh

# eval "$(oh-my-posh init zsh --config $XDG_CONFIG_HOME/omp/cfg.toml)"

# p10k prompt custom colors =====================
  # typeset -g ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'

  # OS identifier color.
  # typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=232
  # typeset -g POWERLEVEL9K_OS_ICON_BACKGROUND=13

  # Current time color.
  # typeset -g POWERLEVEL9K_TIME_FOREGROUND=232
  # typeset -g POWERLEVEL9K_TIME_BACKGROUND=4
  
  ##################################[ dir: current directory ]##################################
  # Current directory background color.
  typeset -g POWERLEVEL9K_DIR_BACKGROUND=25
  # Default current directory foreground color.
  typeset -g POWERLEVEL9K_DIR_FOREGROUND=15
  # If directory is too long, shorten some of its segments to the shortest possible unique
  # prefix. The shortened directory can be tab-completed to the original.
  typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
  # Replace removed segment suffixes with this symbol.
  typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=
  # Color of the shortened directory segments.
  # typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=232
  # Color of the anchor directory segments. Anchor segments are never shortened. The first
  # segment is always an anchor.
  # typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=237
  # Display anchor directory segments in bold.
  typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true

